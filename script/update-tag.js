module.exports = async function updateTag({github, context}) {
	const tagPattern = 'v\d+\.\d+\.\d+'
	const goPlatformClientVersion = require('fs')
		.readFileSync('clients.go', 'utf8')
		.match(new RegExp(tagPattern))
	if (!goPlatformClientVersion) {
		console.log('No version for Go platform client found in clients.go\n',
		            'Looked for pattern: ' + tagPattern + '\n',
		            'Info: A semver version (i.e. v1.2.3) is expected to be' +
			            ' declared as a constant (`const Version =' +
			            ' "v.1.2.3"`) near the top of the clients.go file.' +
			            ' This correlates to the platform client version' +
			            ' generated by theGrpcClientsGenerator.\n\n',
		            'Skipping tag creation')
		return
	}
	
	const response = await github.rest.repos.listTags(
		{
			owner: context.repo.owner,
			repo: context.repo.repo,
			pattern: tagPattern
		}
	)
	
	for (const tag of response.data) {
		if (tag.name === goPlatformClientVersion) {
			console.log('Tag ' + tag.name + ' already exists\n',
			            'Skipping tag creation')
			return
		}
	}
	
	github.rest.git.createRef(
			{
				owner: context.repo.owner,
				repo: context.repo.repo,
				ref: `refs/tags/${goPlatformClientVersion}`,
				sha: context.sha
			})
		.then(() => console.log("Tag " + goPlatformClientVersion + " created"))
		.catch((error) => console.log(error))
}

module.exports = updateTag