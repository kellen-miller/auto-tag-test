module.exports = async function ({github, context}) {
	const tagPattern = /v\d+\.\d+\.\d+/
	const platformClientGoVersion = require('fs')
		.readFileSync('clients.go', 'utf8')
		.match(tagPattern)[0]
	
	if (!platformClientGoVersion) {
		console.log(
			'No version for Go platform client found in clients.go\n',
			'Looked for pattern: ' + tagPattern + '\n',
			'Hint: A semver version (i.e. v1.2.3) is expected to be' +
				' declared as a constant (`const Version =' +
				' "v.1.2.3"`) near the top of the clients.go file.' +
				' This correlates to the platform client version' +
				' generated by theGrpcClientsGenerator.\n\n',
			'Skipping tag creation'
		)
		return
	}
	
	console.log('Found platform-client-go version: ' + platformClientGoVersion)
	
	const response = await github.rest.repos.listTags(
		{
			owner: context.repo.owner,
			repo: context.repo.repo,
			pattern: tagPattern
		}
	)
	
	for (const tag of response.data) {
		if (platformClientGoVersion === tag.name) {
			console.log(
				'Tag ' + platformClientGoVersion + ' already exists on' +
				' repo\n',
				`Hint: Existing tags = [${response.data.map((tag) => tag.name).join(", ")}]\n\n`,
				'Skipping tag creation'
			)
			
			return
		}
	}
	
	github.rest.git.createRef(
			{
				owner: context.repo.owner,
				repo: context.repo.repo,
				ref: `refs/tags/${platformClientGoVersion}`,
				sha: context.sha
			})
		.then(() => console.log("Created Tag: " + platformClientGoVersion))
		.catch((error) => {
			if (error.message !== 'Reference already exists') {
				console.log("Error creating tag", error)
			} else {
				console.log("Tag already exists")
			}
			console.log("\nSkipping tag creation")
		})
}
